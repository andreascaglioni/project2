//verbosity = 1;

real a = atof(ARGV[2]);

//Domain
real r =5;
//Mesh
int res = 100;
//square mesh
int n=res, m=res;
real xlow=-r, xhigh=r;
real ylow=0.5-r, yhigh=0.5+r;
mesh Th=square(n,m,[xlow+(xhigh-xlow)*x,ylow+(yhigh-ylow)*y]);
//alternative: circular mesh
/*border Gamma(t=0,2*pi) { x = 0.7*r*cos(t); y = r*sin(t); }
  mesh Th = buildmesh(Gamma(4*res));*/

// Time advancement parameters
real dt = 0.02;
real finalTime = 60;
int Nit = finalTime/dt;

// INPUT: $V, \Nabla (V), \Delta (V)$
//quadratic potential
/* real s11=1., s12=0.;
 real s21=0., s22=0.5; 
 func V = 0.5*(s11*x*x + (s12+s21)*x*y +s22*y*y);
 func dxV = s11*x+0.5*(s12+s21)*y;
 func dyV = s22*y+0.5*(s12+s21)*x;
 func lapV = s11 + s22;*/
// perturbation
/*func p1 =  a * dyV;
func p2 = -a * dxV;
func dxp1 =  a * 0.5 * (s12+s21);
func dyp2 = -a * 0.5 * (s12+s21);
func divp = dxp1+dyp2;*/
//bistable
/*func V = 0.25*(x^2-1.)^2+0.5*y^2;
func dxV = x^3-x + 0.*y;
func dyV = y;
func lapV = 3.*x^2;*/
// perturbation bistable
/*func p1 =  a * dyV;
func p2 = -a * dxV;
func dxp1 = 0.;
func dyp2 = 0.;
func divp = dxp1+dyp2;*/
// 3-well
func V = 3*exp(-x^2-(y-1./3.)^2)-3*exp(-x^2-(y-5./3.)^2)-5*exp(-(x-1)^2-y^2)-5*exp(-(x+1)^2-y^2)+0.2*x^4+0.2*(y-1./3.)^4;
func dxV = -6*x*exp(-x^2)*(exp(-(y-1./3.)^2 ) -exp(-(y-5./3.)^2))+ 10*(exp(-(x-1)^2)*(x-1) + exp(-(x+1)^2)*(x+1))*exp(-y^2)+ 4./5.*x^3;
func dyV= -6*exp(-x^2)*(exp(-(y-1./3.)^2)*(y-1./3.) - exp(-(y-5./3.)^2)*(y-5./3.))+ 10*(exp(-(x-1)^2) + exp(-(x+1)^2))*y*exp(-y^2)+ 4./5.*(y-1./3.)^3;
func lapV = 12* exp(-x^2 - (y - 1.66667)^2) - 12* exp(-x^2 - (y - 1./3.)^2) - 12* x^2* exp(-x^2 - (y - 1.66667)^2) + 12* x^2* exp(-x^2 - (y - 1./3.)^2) - 12* (y - 1.66667)^2* exp(-x^2 - (y - 1.66667)^2) + 12* (y - 1./3.)^2*exp(-x^2 - (y - 1./3.)^2) + 2.4* x^2 - 20* (x - 1)^2* exp(-(x - 1)^2 - y^2) + 20* exp(-(x - 1)^2 - y^2) + 20* exp(-(x + 1)^2 - y^2) - 20* (x + 1)^2* exp(-(x + 1)^2 - y^2) - 20* y^2* exp(-(x - 1)^2 - y^2) - 20* y^2* exp(-(x + 1)^2 - y^2) + 2.4* (y - 1./3.)^2;
// pertirbation 3-well
func p1 =  a * dyV;
func p2 = -a * dxV;
func dxp1=a* (-6*x*exp(-x^2)*(exp(-(y-1./3.)^2)*(-2*(y-1./3.)) -exp(-(y-5./3.)^2)*(-2*(y-5./3.)))
	      + 10*(exp(-(x-1)^2)*(x-1) + exp(-(x+1)^2)*(x+1))*exp(-y^2)*(-2*y));
func dyp2 = -dxp1;
func divp = dxp1+dyp2;   // todo: eliminate this, the perturbation is divergence-free
// drift term (do not modify)
func b1 = dxV-p1;
func b2 = dyV-p2;
func divb = lapV - divp;

// inverse of stationary measure (do not modify)
func rho = exp(V(x,y));

//Finite elements space and variables
fespace Vh1(Th,P1);   
Vh1 ph, qh, pold;

//Initia condition
pold = (x-r)*(x+r)*((y-0.5)-r)*((y-0.5)+r);     // for square mesh
//pold = r^2-(x^2+y^2);                 // for circular mesh
real mass = int2d(Th)(pold);
pold = pold/mass;
plot(pold, fill=1, value=1, dim=3, wait=1);

varf op(p, q) =  int2d(Th)(p*q/dt)				 // time dependence
       	       - int2d(Th)(pold*q/dt)
               - int2d(Th)((b1*dx(p)+b2*dy(p))*q)                //advection
	       + int2d(Th)(dx(p)*dx(q)+dy(p)*dy(q))		 //diffusion
               - int2d(Th)(divb*p*q)		                 //reaction
               + on(1,2,3,4, p=0);                               //Dirichlet BD

problem FP(ph, qh) = op;

// solve the proble, compute error, print and plot
Vh1[int] sol(Nit);
int it;
for (it=0; it<Nit; it++) {
    sol[it] = pold;
    FP;
    mass = int2d(Th)(ph);
    ph = ph/mass;
    pold = ph;
    
    plot( ph, fill=1, value=1, dim=3, wait=0);
}

// Print timestep and error at every timestep
real[int] L2err(Nit);
string filename = "conv_perturbation_" + a + ".out";
ofstream write(filename);
int prec = write.precision(16);
write << dt << "\n";
for (it=0; it<Nit; it++) {
  L2err[it] = sqrt( (int2d(Th)( (sol[it]-sol[Nit-1])*(sol[it]-sol[Nit-1])*(sol[Nit-1])^(-1)) ) );
  write << L2err[it] << "\n";
  if(L2err[it]<1.e-16)
       break;
}

