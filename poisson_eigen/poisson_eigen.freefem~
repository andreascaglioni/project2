verbosity=10;
mesh Th=square(20,20,[pi*x,pi*y]);
fespace Vh(Th,P2);
Vh u1,u2;
real sigma = 0.;	//shift
varf op(u1,u2) = int2d(Th)( dx(u1)*dx(u2) + dy(u1)*dy(u2) - sigma* u1*u2 )	//OP=A_\sigma B, shifted matrix
     	       	 + on(1,2,3,4,u1=0) ; 	  //BC
varf b([u1],[u2]) = int2d(Th)( u1*u2 );	  //no BC (!)
matrix OP= op(Vh,Vh,solver=Crout,factorize=1); 	  //Crout solver <- op not positive
matrix B= b(Vh,Vh,solver=CG,eps=1e-20);		  
int nev=10;					//number of eigenvalues to compute close to \sigma
real[int] ev(nev);		//to store eigenvalue
real[int] iev(nev);		/to store imaginary part of eigenvalues
Vh[int] eV(nev);		//to sotre eigenvectors

//resolution of dicrete eigenvvalue problem
int k=EigenValue(OP,B,sym=true,sigma=sigma,value=ev,ivalue=iev, vector=eV, tol=1e-10,maxit=0,ncv=0);
    // tol: tolerance
    //maxit: max number of iterations
    //k: number of converged eigenvalues
    //nev (set above): number of desidred eigenvalues

for (int i=0;i<k;i++){
    u1=eV[i];
    real gg = int2d(Th)(dx(u1)*dx(u1) + dy(u1)*dy(u1));
    real mm= int2d(Th)(u1*u1) ;
    cout << " ---- " << i<< " " << ev[i] << "+i" << iev[i] << " err= "
    	 << int2d(Th)(dx(u1)*dx(u1) + dy(u1)*dy(u1) - (ev[i])*u1*u1) << " --- "<<endl;
    plot(eV[i],cmm="Eigen Vector "+i+" valeur =" + ev[i] ,wait=1, dim=3,fill=1, value=1);
}