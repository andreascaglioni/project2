//verbosity=10;
func rho = exp(-0.5*(x*x+y+y));
func dxrho = -x * exp(-0.5*(x*x+y+y));
func dyrho = -y * exp(-0.5*(x*x+y+y));

//Mesh 
//mesh Th=square(20,20,[pi*x,pi*y]);

real r =4;
real xlow=-r,xhigh=r;
real ylow=-r,yhigh=r;

//square mesh
int res = 50;
int n=res, m=res;
mesh Th=square(n,m,[xlow+(xhigh-xlow)*x,ylow+(yhigh-ylow)*y]);

fespace Vh(Th,P2);
Vh u1,u2;
real sigma = 0.;	//shift

varf op(u1,u2) = int2d(Th)((dx(u1)*dx(u2) + dy(u1)*dy(u2))*rho
     	       	 	  +(dx(u1)*dxrho + dy(u1)*dyrho)*u2 
			  - sigma* u1*u2*rho )	//OP=A-sigma*B, shifted matrix
     	       	 	  + on(1,2,3,4,u1=0) ; 	  //BC
varf b([u1],[u2]) = int2d(Th)( u1*u2*rho );	  //no BC (!)
matrix OP= op(Vh,Vh,solver=LU,factorize=1); 	  //Crout solver <- op not positive
matrix B= b(Vh,Vh,solver=GMRES,eps=1e-20);

int nev=20;			//number of eigenvalues to compute close to sigma
real[int] ev(nev);		//to store eigenvalue
real[int] iev(nev);		//to store imaginary part of eigenvalues
Vh[int] eV(nev);		//to store eigenvectors

//resolution of discrete eigenvalue problem
int k=EigenValue(OP,B,sym=false,sigma=sigma,value=ev,ivalue=iev, vector=eV,
		 tol=1e-10,maxit=0,ncv=0);

for (int i=0;i<k;i++){
    u1=eV[i];
    real gg = int2d(Th)(dx(u1)*dx(u1) + dy(u1)*dy(u1));
    real mm= int2d(Th)(u1*u1) ;
    cout << " ---- " << i<< " "		
    	 << ev[i] << "+i" << iev[i]	//eigenvalue
    	 << " err= " << int2d(Th)((dx(u1)*dx(u1)+dy(u1)*dy(u1))*rho + (dx(u1)*dxrho+dy(u1)*dyrho)*u1 - (ev[i])*u1*u1*rho) << " --- "<<endl;
    plot(eV[i],cmm= i + "th eigenvalue=" + ev[i] + "+i" + iev[i] ,wait=1, dim=3,fill=1, value=1);
}